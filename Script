if getgenv().Configs.DungeonFarmMethod ~= "Magu" then
    print("Invalid method")
    return
end
local TeleportService = game:GetService("TeleportService")
local currentPlaceId = game.PlaceId
local targetPlaceId = 6360478118

if currentPlaceId == 1730877806 then
    wait(10)
    TeleportService:Teleport(targetPlaceId, game.Players.LocalPlayer)
    print("Teleporting to Place ID: " .. targetPlaceId)

elseif currentPlaceId == targetPlaceId then
    wait(10)

    local args = {
        [1] = "Dungeon"
    }

    game:GetService("ReplicatedStorage").Events.Queue:InvokeServer(unpack(args))
    

else
    print("Magu Farm Started")
end

if getgenv().Configs.DungeonFarmMethod == "Magu" then
if game.PlaceId == 11424731604 then
    wait(10)
local args = {
    [1] = "Magma Swamp"
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))

local plr = game.Players.LocalPlayer
local npcs = game.Workspace:WaitForChild("NPCs")
local hrp = plr.Character:WaitForChild("HumanoidRootPart")

local Storage = {
    ['HeightIncrease'] = tonumber(getgenv().Configs.HeightAbove)
}

local isHeightIncreased = false
local currentVelocity = nil
local hasKnockedOutFired = false  

local function NoFallVelocity()
    local velocity = Instance.new('BodyVelocity')
    velocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    velocity.Velocity = Vector3.zero
    velocity.Parent = hrp
    return velocity
end

local function ResetVelocity()
    if currentVelocity then
        currentVelocity:Destroy()
        currentVelocity = nil
    end
end

local function TeleportUp()
    hrp.CFrame = hrp.CFrame + Vector3.new(0, Storage['HeightIncrease'], 0)
end

local function ResetHeight()
    hrp.CFrame = hrp.CFrame - Vector3.new(0, hrp.Position.Y, 0)
end

local function DestroyFallDamage()
    local fallDamage = plr.Character:FindFirstChild("FallDamage")
    if fallDamage then
        fallDamage:Destroy()
    end
end

local function CheckWave()
    local currentWaveText = game:GetService("Players").LocalPlayer.PlayerGui.Matchmake.Wave.Text
    local waveNumber = string.match(currentWaveText, "%d+")
    
    if waveNumber == getgenv().Configs.ResetWave and not hasKnockedOutFired then
        local args = { [1] = "self" }
        game:GetService("ReplicatedStorage").Events.KnockedOut:FireServer(unpack(args))
        hasKnockedOutFired = true  
    end
end

local function InvokeSkyWalk2()
    local args = {
        [1] = "Sky Walk2",
        [2] = {
            ["char"] = game:GetService("Players").LocalPlayer.Character,
            ["cf"] = CFrame.new(5912.451171875, 11.865591049194336, -9801.14453125) * CFrame.Angles(1.5707963705062866, -0, -1.5707963705062866)
        }
    }
    game:GetService("ReplicatedStorage").Events.Skill:InvokeServer(unpack(args))
end

local function equipToolIfNotEquipped(tool)
    local player = game.Players.LocalPlayer
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if humanoid and not character:FindFirstChild(tool.Name) then
        humanoid:EquipTool(tool)
        print("Equipped tool:", tool.Name)
    end
end

local function invokeFruitStorage()
    local args = { [1] = true }
    local success, response = pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))
    end)

    if not success then
        print("Error invoking fruit storage:", response)
    end
end


print("Script started and ready.")

local function handleTool(child)
    if child:IsA("Tool") and child:FindFirstChild("FruitModel") then
        local fruitModel = child.FruitModel
        equipToolIfNotEquipped(child)
        local isStored = invokeFruitStorage()
    end
end

local function monitorBackpackForTools()
    local player = game.Players.LocalPlayer
    local backpack = player.Backpack

    backpack.ChildAdded:Connect(function(child)
        wait(0.1)  
        handleTool(child)
    end)

    for _, child in pairs(backpack:GetChildren()) do
        handleTool(child)
    end
end

monitorBackpackForTools()

spawn(function()
    while wait(0.1) do
        pcall(function()
            DestroyFallDamage()
            CheckWave()
            InvokeSkyWalk2()

            if #npcs:GetChildren() == 0 then
                print("No NPCs detected, waiting...")
                wait(1)  
                if #npcs:GetChildren() == 0 then
                    if isHeightIncreased then
                        ResetHeight()
                        isHeightIncreased = false
                    end

                    ResetVelocity()

                    local magmaSwampSkill = game:GetService("ReplicatedStorage"):FindFirstChild(plr.Name .. "|ServerScriptService.Skills.Skills.SkillContainer.Magu-Magu.Magma Swamp")
                    if magmaSwampSkill then
                        magmaSwampSkill:InvokeServer()
                    end
                end
            else
                if not isHeightIncreased then
                    TeleportUp()
                    isHeightIncreased = true
                end

                if not currentVelocity then
                    currentVelocity = NoFallVelocity()
                end

                local remoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill")
                remoteEvent:InvokeServer(unpack(args))
            end

            local nearestNpc = nil
            local shortestDistance = math.huge

            for _, model in pairs(npcs:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model:FindFirstChild("Humanoid") and
                   model.Humanoid.Health > 0 and not model:FindFirstChild("ForceField") then

                    local distance = (model.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= 750 and distance < shortestDistance then
                        nearestNpc = model
                        shortestDistance = distance
                    end
                end
            end

            if nearestNpc then
                for _, remoteEvent in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do
                    if remoteEvent:IsA("RemoteEvent") and 
                       remoteEvent.Name == plr.Name .. "|ServerScriptService.Skills.Skills.SkillContainer.Magu-Magu.Magma Swamp" then
                        local skillArgs = {
                            [1] = nearestNpc.HumanoidRootPart.CFrame
                        }
                        if not currentVelocity then
                            currentVelocity = NoFallVelocity()
                        end
                        remoteEvent:FireServer(unpack(skillArgs))
                    end
                end
            end
        end)
    end
end)
--[[ 
     Made by ArasOfficial#8439
     When you have been kicked, this will rejoin the specified PLACE_ID.
     If you want to remove the script, execute this: game.CoreGui.AutoRejoin:Destroy()
     -- Source --
--]]

local PLACE_ID = 1730877806 -- Change this to your desired place ID.

if game.CoreGui:FindFirstChild('AutoRejoin') then
	game.CoreGui.AutoRejoin:Destroy()
end

local AutoRejoin = Instance.new("ScreenGui")
AutoRejoin.Name = "AutoRejoin"
AutoRejoin.Parent = game.CoreGui
AutoRejoin.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
AutoRejoin.ResetOnSpawn = false

local function KNNVW_fake_script()
	local script = Instance.new('LocalScript', AutoRejoin)
	game:GetService("GuiService").ErrorMessageChanged:Connect(function()
		game:GetService("TeleportService"):Teleport(PLACE_ID)
	end)
end
coroutine.wrap(KNNVW_fake_script)()





local function sendWebhookMessage(messageTitle, messageContent)
    local httpService = game:GetService("HttpService")
    local embedData = {
        ["title"] = messageTitle,
        ["description"] = messageContent,
        ["color"] = 16711680,
        ["footer"] = {
            ["text"] = "Fruit Storage System", 
            ["icon_url"] = "https://naruto-official.com/about/hero.webp"
        },
        ["thumbnail"] = {
            ["url"] = "https://naruto-official.com/about/hero.webp"
        }
    }
    local jsonData = httpService:JSONEncode({
        ["embeds"] = { embedData }
    })
    local function sendRequest()
        if syn and syn.request then
            local response = syn.request({
                Url = getgenv().Configs.Webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
            return response
        elseif http_request then
            local response = http_request({
                Url = getgenv().Configs.Webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
            return response
        elseif game:GetService("HttpService") then
            local response = httpService:RequestAsync({
                Url = getgenv().Configs.Webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
            return response
        else
            return nil
        end
    end
    local success, response = pcall(sendRequest)
    if success then
        print("Message sent successfully!")
    else
        print("Error sending message:", response)
    end
end

local function equipToolIfNotEquipped(tool)
    local player = game.Players.LocalPlayer
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    if humanoid and not character:FindFirstChild(tool.Name) then
        humanoid:EquipTool(tool)
    end
end

local function invokeFruitStorage()
    local args = { [1] = true }
    local success, response = pcall(function()
        game:GetService("ReplicatedStorage").Events.FruitStorage:InvokeServer(unpack(args))
    end)
    return success
end

local function handleTool(child)
    if child:IsA("Tool") and child:FindFirstChild("FruitModel") then
        local fruitModel = child.FruitModel
        equipToolIfNotEquipped(child)

        local isEquippedBefore = child.Parent == game.Players.LocalPlayer.Character
        local isStored = invokeFruitStorage()
        
        local isEquippedAfter = child.Parent == game.Players.LocalPlayer.Character
        local messageTitle = "Fruit Found: " .. child.Name

        if isEquippedAfter then
            sendWebhookMessage(messageTitle, "Max Fruits Aquired Cant Store")  
        else
            sendWebhookMessage(messageTitle, "Fruit Stored: Yes")  
        end
    end
end

local function monitorBackpackForTools()
    local player = game.Players.LocalPlayer
    local backpack = player.Backpack

    backpack.ChildAdded:Connect(function(child)
        wait(0.1)  
        handleTool(child)
    end)

    for _, child in pairs(backpack:GetChildren()) do
        handleTool(child)
    end
end

local function onCharacterAdded(character)
    local player = game.Players.LocalPlayer

    local humanoid = character:WaitForChild("Humanoid")

   
    monitorBackpackForTools()

  
    player.CharacterAdded:Connect(function(newCharacter)
        onCharacterAdded(newCharacter)
    end)
end


local player = game.Players.LocalPlayer
if player.Character then
    onCharacterAdded(player.Character)
else
    player.CharacterAdded:Connect(function(character)
        onCharacterAdded(character)
    end)
end

end
end
---Gpo Br
if game.PlaceId == 648454481 then
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Elastic Hub : Gpo Battle Royale",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Elastic Hub",
    LoadingSubtitle = "by zoom",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
 local PlayerTab = Window:CreateTab("Player Features", 4483362458) -- Title, Image
 local EspTab = Window:CreateTab("Player Features", 4483362458) -- Title, Image
 local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local runService = game:GetService("RunService")

local targetWalkSpeed = 16  -- Default walk speed
local tpwalking = false -- Set this to false to disable the custom walk speed

-- Function to remove the "Stun" object if detected
local function removeStun()
    if character:FindFirstChild("Stun") then
        character.Stun:Destroy()
    end
end

-- Function to apply custom movement
local function customWalkSpeed()
    while tpwalking and character and humanoid and humanoid.Parent do
        local delta = runService.Heartbeat:Wait() -- Ensures smooth movement
        
        -- Check for and remove "Stun"
        removeStun()

        -- If the humanoid is moving, apply the custom walk speed
        if humanoid.MoveDirection.Magnitude > 0 then
            -- Apply custom walk speed
            character:TranslateBy(humanoid.MoveDirection * targetWalkSpeed * delta)
        end
    end
end

-- Function to start or stop the custom walkspeed when toggle is pressed
local function toggleWalkSpeed(enable)
    tpwalking = enable
    if tpwalking then
        customWalkSpeed() -- Start the custom walk speed
    else
        humanoid.WalkSpeed = 16 -- Set walk speed back to default if toggled off
    end
end

-- Update walkspeed when slider value changes
local function onSliderChanged(value)
    targetWalkSpeed = value
    if tpwalking then
        humanoid.WalkSpeed = targetWalkSpeed
    end
end

-- Create UI elements for WalkSpeed Slider and Toggle

-- Create the WalkSpeed Slider
local Slider = PlayerTab:CreateSlider({
    Name = "Walkspeed",
    Range = {0, 100},  -- Slider range from 0 to 100
    Increment = 1,
    Suffix = "Amount",
    CurrentValue = 16,  -- Default walkspeed is 16
    Flag = "Slider1",    -- Unique identifier for saving settings
    Callback = onSliderChanged, -- Update walkspeed when slider changes
})

-- Create the WalkSpeed Toggle
local Toggle = PlayerTab:CreateToggle({
    Name = "Enable Walkspeed",
    CurrentValue = false,  -- Start with the toggle disabled
    Flag = "Toggle1",      -- Unique identifier for saving settings
    Callback = function(Value)
        -- The "Value" will be true if the toggle is enabled, false if disabled
        toggleWalkSpeed(Value) -- Call the function to enable/disable custom walkspeed
    end,
})

-- Monitor character respawn to reset walk speed
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    -- Reset to default walkspeed
    humanoid.WalkSpeed = 16
    -- Remove any stun and apply custom walk speed if enabled
    removeStun()
    if tpwalking then
        customWalkSpeed()
    end
end)

-- Start the custom movement and stun removal if toggle is enabled
if tpwalking then
    customWalkSpeed()
end
local player = game.Players.LocalPlayer
local statsName = "Stats" .. tostring(player.Name)

-- Assuming you want to access the object in ReplicatedStorage with this name
local stats = game:GetService("ReplicatedStorage"):WaitForChild(statsName)

-- Now you can work with the stats object
print(stats)
local Skills = stats:WaitForChild("Skills")
local SkyWalk = Skills.skyWalk
local Stats = stats:WaitForChild("Stats")
local Toggle = PlayerTab:CreateToggle({
    Name = "SkyWalk",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    SkyWalk.Value = Value
    end,
 })
local Toggle = PlayerTab:CreateToggle({
    Name = "No Drown",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        while wait(0) do
        Stats.DF.Value = ""  -- Clear the value (set it to an empty string)
    end
    end,
})

local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local workspace = game:GetService("Workspace")

-- Table to track ESP for each model
local espTable = {}

-- Variables to control the toggles
local chestEspEnabled = false
local fightingStyleEspEnabled = false

-- Function to create ESP for a Chest model (based on its name)
local function createChestESP(model)
    if model.Name == "Chest" then
        -- Check if ESP already exists for this Chest model
        if espTable[model] then return end

        -- Create a BillboardGui to display "Chest" above the model
        local esp = Instance.new("BillboardGui")
        esp.Adornee = model
        esp.Parent = player.PlayerGui
        esp.Size = UDim2.new(0, 150, 0, 50)  -- Size of the text display
        esp.AlwaysOnTop = true
        esp.StudsOffset = Vector3.new(0, 3, 0) -- Offset above the model
        esp.MaxDistance = 1000  -- Makes the ESP visible even from a long distance

        -- Create a TextLabel inside the BillboardGui to display "Chest"
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.Text = "Chest"  -- Set the text to "Chest"
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White text color
        textLabel.BackgroundTransparency = 1  -- Make the background transparent
        textLabel.TextScaled = true  -- Automatically scale text size
        textLabel.TextStrokeTransparency = 0.5  -- Optional: Add stroke for readability
        textLabel.Parent = esp

        -- Save the ESP reference in the table
        espTable[model] = esp
    end
end

-- Function to create ESP for a model with FightingStyle attribute
local function createFightingStyleESP(model)
    -- Check if the model has the FightingStyle attribute
    local fightingStyle = model:GetAttribute("FightingStyle")
    if not fightingStyle then return end

    -- Check if ESP already exists for this model
    if espTable[model] then return end

    -- Create a BillboardGui to display the FightingStyle above the model
    local esp = Instance.new("BillboardGui")
    esp.Adornee = model
    esp.Parent = player.PlayerGui
    esp.Size = UDim2.new(0, 150, 0, 50)  -- Size of the text display
    esp.AlwaysOnTop = true
    esp.StudsOffset = Vector3.new(0, 3, 0) -- Offset above the model
    esp.MaxDistance = 1000  -- Makes the ESP visible even from a long distance

    -- Create a TextLabel inside the BillboardGui to display the FightingStyle
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Text = fightingStyle  -- Set the text to the FightingStyle value
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White text color
    textLabel.BackgroundTransparency = 1  -- Make the background transparent
    textLabel.TextScaled = true  -- Automatically scale text size
    textLabel.TextStrokeTransparency = 0.5  -- Optional: Add stroke for readability
    textLabel.Parent = esp

    -- Save the ESP reference in the table
    espTable[model] = esp
end

-- Function to remove ESP for a model
local function removeESP(model)
    -- Check if the model has an ESP
    if espTable[model] then
        espTable[model]:Destroy()
        espTable[model] = nil
    end
end

-- Function to update ESP for all relevant models in workspace.Effects
local function updateESP()
    local effects = workspace:FindFirstChild("Effects")
    if effects then
        -- Iterate through all models in workspace.Effects
        for _, model in pairs(effects:GetChildren()) do
            if model:IsA("Model") then
                -- Check for Chest model ESP
                if chestEspEnabled then
                    createChestESP(model)
                end

                -- Check for FightingStyle model ESP
                if fightingStyleEspEnabled then
                    createFightingStyleESP(model)
                end
            end
        end
    end
end

-- Function to monitor changes in workspace.Effects
local function monitorEffectsChanges()
    local effects = workspace:FindFirstChild("Effects")
    if effects then
        -- Monitor model additions and removals
        effects.ChildAdded:Connect(function(child)
            if child:IsA("Model") then
                -- Check if Chest ESP or FightingStyle ESP needs to be created
                if chestEspEnabled then
                    createChestESP(child)
                end
                if fightingStyleEspEnabled then
                    createFightingStyleESP(child)
                end
            end
        end)

        effects.ChildRemoved:Connect(function(child)
            if child:IsA("Model") then
                -- Remove ESP for the model
                removeESP(child)
            end
        end)
    end
end

-- Call the monitoring function to start tracking the Effects
monitorEffectsChanges()

-- Reduce update frequency to improve performance
local lastUpdateTime = 0
local updateInterval = 1  -- Update every 1 second (adjust as needed)

-- Connect to RenderStepped for smooth updates but with a frequency limit
runService.RenderStepped:Connect(function()
    local currentTime = tick()
    if currentTime - lastUpdateTime >= updateInterval then
        updateESP()  -- Update the ESP for models in workspace.Effects
        lastUpdateTime = currentTime  -- Update the last update time
    end
end)

-- Toggling logic with the two separate toggles
local ToggleChestEsp = EspTab:CreateToggle({
    Name = "Chest Esp",
    CurrentValue = false,
    Flag = "ToggleChestEsp", -- A unique flag for configuration saving
    Callback = function(Value)
        chestEspEnabled = Value  -- Update chest ESP toggle state
        -- If chest ESP is turned off, remove all Chest ESPs
        if not chestEspEnabled then
            for model, esp in pairs(espTable) do
                if model.Name == "Chest" then
                    removeESP(model)
                end
            end
        end
    end,
})

local ToggleFightingStyleEsp = EspTab:CreateToggle({
    Name = "Fighting Style Esp",
    CurrentValue = false,
    Flag = "ToggleFightingStyleEsp", -- A unique flag for configuration saving
    Callback = function(Value)
        fightingStyleEspEnabled = Value  -- Update Fighting Style ESP toggle state
        -- If Fighting Style ESP is turned off, remove all Fighting Style ESPs
        if not fightingStyleEspEnabled then
            for model, esp in pairs(espTable) do
                if model:GetAttribute("FightingStyle") then
                    removeESP(model)
                end
            end
        end
    end,
})
end
 
